\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{Sweave}
\usepackage{thumbpdf}
\usepackage{url}
\usepackage{wrapfig}
\usepackage{hyperref}

\hypersetup{
  pdftitle={Using the Google Visualisation API with R},%
  pdfauthor={Markus Gesmann},%
}

%\VignetteIndexEntry{Using the Google Visualisation API with R}

\SweaveOpts{engine=R, eps=FALSE, keep.source = TRUE}
<<options, echo=FALSE>>=
options(prompt = "R> ", digits = 4, show.signif.stars = FALSE)
@


%\keywords{google, visualisation, api, statistical software, \proglang{R}}

\setlength{\parindent}{0.0in}
\setlength{\parskip}{2mm}

\newcommand{\googleVis}{\textbf{\texttt{googleVis}} }
\newcommand{\googleVisVersion}{0.2.13}
\newcommand{\rsp}{\textbf{\texttt{R.rsp }}}
\newcommand{\brew}{\textbf{\texttt{brew }}}
\newcommand{\rapache}{\emph{{RApache }}}
\newcommand{\rjsonio}{\textbf{\texttt{RJSONIO }}}

\renewcommand{\familydefault}{\sfdefault}

\begin{document}

\author{Markus Gesmann\footnote{markus.gesmann@gmail.com},
  Diego de Castillo\footnote{decastillo@gmail.com}\\
Contact: rvisualisation@gmail.com}
\title{Using the Google Visualisation API with R:\\
  googleVis-\Sexpr{packageDescription("googleVis")[['Version']]} Package Vignette
}
\maketitle
\begin{abstract}
  The \googleVis package provides an interface between R and the
  Google Visualisation API.  The Google Visualisation API offers
  interactive charts which can be embedded into web pages. The best
  known of these charts is probably the Motion Chart, popularised 
  by Hans Rosling in his TED talks. 
 
  The functions of the \googleVis package allow the user to visualise
  data stored in R data frames with the Google Visualisation API
  without uploading the data to Google. The output of a \googleVis
  function is html code that contains the data and references to
  JavaScript functions hosted by Google.
  
  googleVis makes use of the internal R HTTP server to display the
  output locally. A browser with Flash and Internet connection is
  required.
	     
\end{abstract}

\clearpage
\tableofcontents
\clearpage

\section{Introduction}

\subsection{Motivation}
More and more data is becoming available, and yet
stories and insights are still often missed: we are lost in the data
jungle and struggle to see the wood for the trees. 

Hence new tools are required to bring data to life, to engage with
users, to enable them to slice and dice the data, to view it from
various angles and to find stories worth telling: outliers, trends or
even the obvious. 

In 2006 Hans Rosling gave an inspiring talk at
TED~\cite{HansRoslingTedTalk} about social and economic developments
in the world over the past 50 years, which challenged the views and
perceptions of many listeners. Rosling had used extensive data analysis
to reach his conclusions.  To visualise his talk, he and his team at
Gapminder~\cite{Gapminder} had developed animated bubble charts, aka
motion charts, see Figure~\ref{MotionChartGUI}. 

Rosling's presentation popularised the idea and use of interactive
charts, and as one result the software behind
Gapminder was bought by Google and integrated as motion charts into
their Visualisation API~\cite{GoogleVisApi} one year later. 

We also notice that data journalism has grown over the recent
years. The data blogs of the
\href{http://www.guardian.co.uk/news/datablog}{Guardian (UK)}, and 
\href{http://blogs.taz.de/open-data/}{taz.de (Die Tageszeitung,
 Germany)} have brought data analysis and data visualisation to a wider
audience. 

In 2010 Sebasti\'{a}n P\'{e}rez Saaibi~\cite{Saaibi2010} presented at the 
R/Rmetrics Workshop on  Computational Finance and Financial
Engineering, the idea to use Google motion charts to visualise R
output with the \rsp package~\cite{Rsp}. 

Inspired by those talks and the desire to use interactive data
visualisation tools to foster the dialogue between data analysts and
others the authors of this vignette started the development of the
\googleVis package~\cite{googleVis}. 

Of course there are many other alternative visualisation toolkits out
there, e.g.  
\href{http://services.alphaworks.ibm.com/manyeyes/page/Create_a_Visualization.html}{Many
  Eyes} \cite{ManyEyes},
\href{http://teethgrinder.co.uk/open-flash-chart/}{Open Flash Chart
  (Flash)} \cite{OpenFlashChart}, 
\href{http://www.openlayers.org/}{OpenLayers
  (JavaScript)} \cite{OpenLayers}, 
\href{http://processing.org/}{Processing (Java)} \cite{Processing}, 
\href{http://simile.mit.edu/}{simile (AJAX)} \cite{Simile} and
\href{http://flare.prefuse.org/}{FLARE (ActionScript)} \cite{Flare}.

\begin{figure}%%[!ht]
\begin{center}
\includegraphics[width=\textwidth]{MotionChart.pdf}
\caption{
  Overview of a Google Motion Chart.  Screenshot of the output of
  \texttt{plot(gvisMotionChart(Fruits, idvar='Fruit', timevar='Year'))}
}\label{MotionChartGUI}
\end{center}
\end{figure}
%\clearpage

\subsection{Google Visualisation API}

The Google Visualisation API~\cite{GoogleVisApi}, \cite{GoogleTerms}
allows users to create interactive charts as part of Google
documents, spreadsheets and web pages. In this text we will focus 
on the usage of the API as part of web pages.

The Google Public Data Explorer~\cite{GooglePublicData} provides a
good example, demonstrating the use of interactive charts and how they can
help to analyse data. Please note, that most of those charts are rendered
within a browser.

The charting data can either be embedded into the html file or read
dynamically. The key to the Google Visualisation API is that the data is
structured in a DataTable~\cite{DataTable}, and this is where the \googleVis
package helps, as it uses the functionality of the \rjsonio
package~\cite{RJSONIO} to transform R data frames into
JSON~\cite{json} objects as the basis for a DataTable.

As an example we shall look at the html-code of a motion chart from
Google's visualisation gallery~\cite{GoogleMotionChart}, which
generates output similar to Figure~\ref{MotionChartGUI}:

\begin{small}
\begin{verbatim}
 1 <html>
 2  <head>
 3   <script type="text/javascript" 
 4     src="http://www.google.com/jsapi">
 5   </script>
 6   <script type="text/javascript">
 7     google.load('visualization', '1', 
 8      {'packages':['motionchart']});
 9    google.setOnLoadCallback(drawChart);
10    function drawChart() {
11    var data=new google.visualization.DataTable();
12    data.addColumn('string', 'Fruit');
13    data.addColumn('date', 'Date');
14    data.addColumn('number', 'Sales');
15    data.addColumn('number', 'Expenses');
16    data.addColumn('string', 'Location');
17    data.addRows([
18    ['Apples',new Date(1988,0,1),1000,300,'East'],
19    ['Oranges',new Date(1988,0,1),1150,200,'West'],
20    ['Bananas',new Date(1988,0,1),300,250,'West'],
21    ['Apples',new Date(1989,6,1),1200,400,'East'],
22    ['Oranges',new Date(1989,6,1),750,150,'West'],
23    ['Bananas',new Date(1989,6,1),788,617,'West']
24    ]);
25    var chart=new google.visualization.MotionChart(
26      document.getElementById('chart_div'));
27    chart.draw(data, {width: 600, height:300});
28   }
29   </script>
30  </head>
31  <body>
32   <div id="chart_div" 
33        style="width:600px; height:300px;">
34   </div>
35  </body>
36 </html>
\end{verbatim}
\end{small}
The code and data are processed and rendered in the browser and is
not submitted to any server\footnote{
\url{http://code.google.com/apis/visualization/documentation/gallery/motionchart.html\#Data\_Policy}}. 

You will notice that the above html code has five generic
parts\footnote{For more details see
\url{http://code.google.com/apis/chart/interactive/docs/adding\_charts.html}}:
\begin{itemize}
\item references to Google's AJAX (l. 4) and Visualisation
  API (ll. 7 -- 8),
%%shown here as \verb=jsapi= and \verb='motionchart'=,

\item data to visualise as a \verb=DataTable= (ll. 11 -- 24),

\item an instance call to create the chart (ll. 25 -- 26),

\item a method call to draw the chart including options, shown
  here as width and height (l. 27),
 
\item an HTML \verb=<div>= element to add the chart to the page (ll.
  32 -- 34).
\end{itemize}
These principles hold true for most of the interactive charts of the
Google Visualisation API, see the examples in Figure~\ref{demos}.

However, before you use the API you should read the \href{http://code.google.com/apis/visualization/terms.html}{Google
  Visualization API Terms of Service}  and the \href{http://code.google.com/apis/maps/terms.html}{Google  
Maps/Google Earth APIs Terms of Service}.

\section{The \googleVis package}


The \googleVis package provides an interface between R and the Google
Visualisation API.  The functions of the package allow the user to
visualise data stored in R data frames with the Google Visualisation
API.

Version (\googleVisVersion) of the package
provides interfaces to  Motion Charts, Annotated Time Lines, 
Geo Maps, Maps, Geo Charts, Intensity Maps, Tables, Gauges, 
Tree Maps, further Line-, Bar-, Column-, Area-, Stepped Area-, 
Combo-, Scatter-, Candlestick-, Pie- and Org Charts; see 
Figure~\ref{demos} for some examples for more see the  \href{http://code.google.com/p/google-motion-charts-with-r/wiki/GadgetExamples}{project site}\footnote{http://code.google.com/p/google-motion-charts-with-r/wiki/GadgetExamples}.

The output of a \googleVis function is html code that contains the
data and references to JavaScript functions hosted by Google. A
browser with an Internet connection is required to view
the output, and for Motion Charts, Geo Maps and Annotated Time Lines
also Flash. The actual chart is rendered in the browser. 

\begin{figure}%%[!ht]
\begin{center}
\includegraphics[width=\textwidth]{googleVisDemoPlots2.pdf}
\caption{
  Screenshot of some of the outputs of \texttt{demo(googleVis)}.
  Clockwise from top left:
  \texttt{gvisMotionChart}, \texttt{gvisAnnotatedTimeLine}, 
  \texttt{gvisGeoMap}, \texttt{gvisTreeMap}, \texttt{gvisTable}, and \texttt{gvisMap}.
}\label{demos}
\end{center}
\end{figure}

\subsection{Installation}
We can install \googleVis in the usual way from CRAN, e.g.:
<<eval=FALSE>>=
install.packages('googleVis') 
@
The installation was successful if the
command \texttt{library(googleVis)} gives you the following message:
<<echo=FALSE, quite=TRUE>>=
library(googleVis)
@ 
<<eval=FALSE>>=
library(googleVis)
@ 
<<echo=FALSE>>=
cat(googleVis:::gvisWelcomeMessage())
@ 

\subsection{Using the  \googleVis package}

The individual functions of the \googleVis package are documented in
detail in the help pages. Here we will cover only the principles of
the package.

As an example we will show how to generate a motion chart as displayed in   
Figure~\ref{MotionChartGUI}. It works similarly for the other
APIs. Further examples are covered in the demos of the \googleVis
package, see also Figure~\ref{demos}. 

The design of the visualisation functions is fairly generic. The name
of the visualisation function is \texttt{'gvis' + ChartType}. So for
the Motion Chart we have: 
\begin{verbatim}
gvisMotionChart(data, idvar='id', timevar='date', 
                options=list(), chartid)
\end{verbatim}
Here \texttt{data} is the input \texttt{data.frame} and \texttt{idvar}
and \texttt{timevar} specify the column names of the id variable and
time variable for the plot, while display options are set in an
optional list, which we discuss in more detail on
page~\pageref{settingoptions}. The options and data requirements
follow those of the Google Visualisation API and are documented in the
help pages, see 
<<eval=FALSE>>=
help('gvisMotionChart')
@ 

\begin{wrapfigure}{r}{0.35\textwidth}
\begin{center}
\includegraphics[width=0.34\textwidth]{gvisObject.pdf}
\caption{Schematic structure of a gvis list object.
}\label{gvisObject}
\end{center}
\end{wrapfigure}

The argument \texttt{chartid}  allows the user to set a chart id of the
output chart manually. If the argument is missing a random id using 
\texttt{tempfile(pattern=\textquotesingle\textquotesingle)}  
will be generated. Unique chart ids are required to place more than
one chart into a page. 

The output of a \googleVis function is a list of lists (a nested list)
containing information about the chart type, chart id and the html
code in a  sub-list with header, chart, caption and footer, see Figure~\ref{gvisObject}.

The idea behind this concept is that users can get a
complete web page while at the same time extracting specific parts,
such as the chart. This is particular helpful if the package functions
are used in solutions where the user wants to feed the visualisation
output into other sites, or would like to embed them into rsp-pages
(see page~\pageref{rspexample}),  or use \rapache (see
page~\pageref{rapacheexample}) or Google Gadgets.  

The output of a \googleVis function will be of class \texttt{'gvis'}
and \texttt{'list'}. Generic print (\texttt{print.gvis})  and plot
(\texttt{plot.gvis}) functions exist to ease the handling of such objects. 

To illustrate the concept we shall create a motion chart using the
\texttt{Fruits} data set. 

\subsection{Motion Chart Example}

Following the documentation of the Google Motion Chart API we need a
data set which has at least four columns: one identifying the
variable we would like to plot, one time variable and at least two
numerical variables, further numerical and character columns are allowed.

As an example we use the \texttt{Fruits} data set:
<<>>=
data(Fruits)
Fruits
@

Here we will use the columns \texttt{'Fruit'} and
\texttt{'Year'} as id and time variable respectively. However we could
heave used \texttt{'Date'} instead of \texttt{'Year'} as well. 

<<>>=
 M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
@
The structural output of \texttt{gvisMotionChart} is a list of lists as
described above 
<<eval=FALSE>>=
 str(M)
@ 
<<echo=FALSE>>=
## This statement avoids truncation
cat(paste(substring( capture.output( str(M) ) , 0, 66), sep="\n", collapse="\n"))
@ 
The first two items of the list contain information about the chart type
used and the individual chart id: %generated at run time from the chart
%type and \texttt{tempfile(pattern=\textquotesingle\textquotesingle)}:
<<>>=
M$type
M$chartid
@ 
The html output is a list with header, chart, caption and
footer. This allows the user to extract only certain parts
of the page, or to create a complete html page. 

The header part of the html page has only basic html and formatting tags: 
<<>>=
print(M, tag='header')
@ 
Here we used the \texttt{print} statement with the tag
\texttt{'header'} instead of \texttt{M\$html\$header} to achieve
a formatted screen output. This is the same output as
\texttt{cat(M\$html\$chart)}. 

The actual Google visualisation code is stored with the data
as a named character vector in the \texttt{chart} item of the html
list. The chart is made up of several JavaScript and  HTML
statements. Please notice that the JavaScript functions are  
uniquely named with the information of the chart id.
This concept allows the user get all the chart code directly or only
specific parts; see the examples in the help page of \texttt{print.gvis}
for more details.
<<>>=
names(M$html$chart)
@ 
The complete chart can be displayed via:
<<>>=
print(M, tag='chart')  ## or cat(M$html$chart)
@
Similarly you can also access specific components of the chart, e.g.
<<>>=
cat(M$html$chart['jsChart']) # or print(M, 'jsChart')
@ 

A basic chart caption and html footer are the final items of the html
list (output is truncated):

<<eval=FALSE>>=
print(M, tag='caption')
@ 
<<echo=FALSE>>=
cat(paste(substring( capture.output( cat(M$html$caption) ) , 0, 66), sep="\n", collapse="\n"))
@ 

<<eval=FALSE>>=
print(M, tag='footer')
@ 
<<echo=FALSE>>=
cat(paste(substring( capture.output( cat(M$html$footer) ) , 0, 66), sep="\n", collapse="\n"))
@ 

\subsection{Displaying \texttt{gvis} objects locally}

To display the page locally, type:
<<eval=FALSE>>=
plot(M)  # returns invisibly the file name
@

The plot method for \texttt{gvis}-objects creates html files in a temporary folder using
the type and chart id information of the object and it will display
the output using the R HTTP help web server locally, usually under
http://127.0.0.1.   

The chart caption provides a link to the chart code via
the chart id for easy copy and paste. 

The R command \texttt{tempdir()}  will show you the path of the
per-session temporary directory, in which the files were written.  
You can write the chart into a local html file via the \texttt{print}
command with the file argument, e.g.
<<eval=FALSE>>=
print(M, file="myGoogleVisChart.html")
@ 

Please note that Flash charts\footnote{Currently the following charts
  require Flash: motion chart, geo map and
  annotated time line} may not work when loaded as a local file
due to security settings, and therefore require to be displayed via a
web server.  However, you can overcame this issue by changing your Flash security
settings. Tony Breyal posted the following solution on
\href{http://stackoverflow.com/questions/8009825/cannot-view-gvismotionchart-from-printed-html-file 
}{stackoverflow.com}: 

\begin{enumerate}\label{breyal}
\item Go to \url{http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html}
\item Click on the dropbox which says 'Edit location' and choose 'add location'
\item Click 'browse for folder'
\item Choose the folder in which you saved your html file
\item Click OK
\end{enumerate}

Now open your googleVis html file and it should display
successfully. 

\subsection{Combing charts with \texttt{gvisMerge}}

The function \texttt{gvisMerge} takes two \texttt{gvis}-objects 
and merges the underlying components into one page. The charts are
aligned either horizontally or vertically next to each other in an HTML table. 

The output of \texttt{gvisMerge} is a \texttt{gvis}-object again.
This allows us to apply the same function iteratively to create more complex
chart layouts.  The following example, see Figure~\ref{gvisMerge}, aligns a geo chart
and table below each other, and combines the output with a motion chart to the right:
<<>>=
G <- gvisGeoChart(Exports, "Country", "Profit", 
                  options=list(width=200, height=100))
T <- gvisTable(Exports, 
                  options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
                     options=list(width=400, height=370))
GT <- gvisMerge(G,T, horizontal=FALSE) 
GTM <- gvisMerge(GT, M, horizontal=TRUE, 
                 tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
@ 
<<eval=FALSE>>=
plot(GTM)
@ 
\begin{figure}%%[!ht]
\begin{center}
\includegraphics[width=0.8\textwidth]{gvisMerge.pdf}
\caption{
  Three charts combined with \texttt{gvisMerge}.
}\label{gvisMerge}
\end{center}
\end{figure}

\subsection{Setting options}\label{settingoptions}

Setting the various options of a \googleVis objects can be a bit
cumbersome at first. The options follow those of the Google
Visualisation API and can be set via a named list using the argument \texttt{options}.
In the following example we create a line chart and set various
options\footnote{Please refer to the help file of the individual
  \googleVis functions, as the options can vary from chart to chart.},
see the output in Figure~\ref{Options}.  
\begin{figure}%%[!ht]
\begin{center}
\includegraphics[width=0.8\textwidth]{Options.pdf}
\caption{
  A line chart with various options set.
}\label{Options}
\end{center}
\end{figure}
<<eval=FALSE>>=
df <- data.frame(country=c("US", "GB", "BR"), 
                        val1=c(1,3,4), val2=c(23,12,32))

Line <-  gvisLineChart(df, xvar="country", yvar=c("val1","val2"),
                        options=list(
                          title="Hello World",
                          titleTextStyle="{color:'red', 
                                           fontName:'Courier', 
                                           fontSize:16}",                         
                          backgroundColor="#D3D3D3",                          
                          vAxis="{gridlineColor:'#FFFFFF'}",
                          hAxis="{title:'Country', 
                                  titleTextStyle:{color:'blue'}}",
		          series="[{color:'green', targetAxisIndex: 0},	
                                   {color: 'orange',targetAxisIndex:1}]",
                          vAxes="[{title:'val1'}, {title:'val2'}]",
                          legend="bottom",
                          curveType="function",
                          width=500,
                          height=300                         
                          ))
plot(Line)
@
As you can see some from the example above, the simpler options can be set by name=value,
e.g. width=500, while the more complex options with sub-components are
listed in curly brackets \{\}, and arrays, e.g. to define the two
axes, use square brackets [ ].

\subsubsection{Chart Editor}
A special option for all charts is \texttt{gvis.editor}, which adds an
edit  button to the page, allowing the user to edit, change and
customise the chart on the fly, see the following example and
Figure~\ref{Editor}. The content of the list item \texttt{gvis.editor}
describes the label of the browser button\footnote{See also
  \url{http://code.google.com/apis/chart/interactive/docs/reference.html\#google\_visualization\_charteditor}}. 
<<eval=FALSE>>=
Editor <- gvisLineChart(df, options=list(gvis.editor='Edit me!'))
plot(Editor)
@ 
\begin{figure}%%[!ht]
\begin{center}
\includegraphics[width=0.8\textwidth]{Editor.pdf}
\caption{
Example of \googleVis chart with \texttt{options = list (gvis.editor =
  'Edit me!')}.
}\label{Editor}
\end{center}
\end{figure}

\section{Embedding \googleVis in web sites}

\subsection{Integrating \texttt{gvis} objects in existing sites}

Suppose you have an existing web page and would like to integrate the
output of a \googleVis function, such as \texttt{gvisMotionChart}. 
In this case you only need the chart output from
\texttt{gvisMotionChart}.  So you can either copy and paste the output
from the R console
<<eval=FALSE>>=
print(M, 'chart')  ## or cat(M$html$chart) 
@ or the browser, see previous section, 
into your existing html page, or write the content directly into a file
<<eval=FALSE>>=
print(M, 'chart', file='myfilename')
@
and process it from there.

\subsection{Using \googleVis output with WordPress}

\href{http://wordpress.org/}{WordPress} is a popular web software for
creating websites and blogs. Here we give some tips about the
usage with \googleVis output.  

By default WordPress does not allow JavaScript code (and hence \googleVis
output) to be inserted into a page. However, additional plugins
allow us to extend the functions of WordPress.

One option of embedding JavaScript code inside a WordPress post is to use
the ``custom fields shortcode''
plugin\footnote{\url{http://wordpress.org/extend/plugins/custom-fields-shortcode}}. 
The plugin allows you to create a custom field for the \googleVis
code, which can be referred to in your article.

Suppose you created a motion chart in R:
<<eval=FALSE>>=
M <- gvisMotionChart(Fruits, "Fruit", "Year",
		     options=list(width=400, height=370))
@
Copy the chart code, e.g. from
<<eval=FALSE>>=
print(M, 'chart')
@ 
and paste it into the value text area of a custom field in WordPress, e.g.
with instance name \texttt{Fruits}.  To include the motion chart into your article add
\texttt{[cf]Fruits[/cf]} into the post, see Figure~\ref{wordpress} for
an illustration.

\begin{figure}[h]
  \centering
  \includegraphics[width=0.8\textwidth]{CreatePost.png}
  \caption{Including \googleVis output in a WordPress blog entry.}
  \label{wordpress}
\end{figure}


\subsection{Using \googleVis output with Google Sites, Blogger, etc.}

Google Charts can be used with other Google products such as Google
Sites, Blogger or Google Code wiki pages. 
However, in most cases the chart has to be embedded as a Google Gadget.
Google Gadgets are written in XML and can have HTML and Javascript components.
Here is an example of a 'Hello World' program written using Google
Gadget technology from \href{http://en.wikipedia.org/wiki/Google_Gadgets}{Wikipedia}.
\begin{verbatim}
<?xml version="1.0" encoding="UTF-8" ?> 
<Module>  
<ModulePrefs title="simple hello world example" />   
<Content type="html">     
     <![CDATA[ 
       Hello, world!
     ]]>
</Content> 
</Module>
\end{verbatim}
The \googleVis package comes with the function
\texttt{createGoogleGadget}, which takes a gvis-object and
wraps it into an XML gadget file. Here is an example with a motion chart:
<<>>=
M <- gvisMotionChart(Fruits, "Fruit", "Year")
G <- createGoogleGadget(M)
@ 
<<eval=FALSE>>=
cat(G, file="myGadget.xml")
@ 
In order to use the gadget, the file \texttt{myGadget.xml} has to be
hosted online, e.g. using Google Docs. 
Suppose the URL to the gadget is
\texttt{http://example.com/myGadget.xml}, than you can embed  the gadget

\begin{itemize}

\item in a Google Site via the menu:
  
  "Insert" -> "More gadgets ..." -> "Add gadget URL",
  
\item in a Google Code wiki via the \texttt{wiki:gadget} tag, e.g.: 
  
  \texttt{<wiki:gadget url="http://example.com/gadget.xml" />},

 \item in Blogger via the design tab, see site gadget.
\end{itemize}

However, the situation is different again, if you would like to include the \googleVis
output into a blogger post.  In this case a gadget does not
work. You can either copy and paste the chart directly into your
post, but then it does not seem to work with MS Internet Explorer, or
you use an indirect approach. This means that the \googleVis
chart has to be hosted on a separate page (e.g. in a public Dropbox
folder) and is embedded into the blog post by using the
\texttt{<iframe>} tag, e.g.: 
\begin{verbatim}
<iframe width="100%" height="400px" frameborder="0" 
src="http://example.com/myGoogleVisChart.html">
</iframe>
\end{verbatim}
For an example see the following blog entry:
\href{http://lamages.blogspot.com/2011/09/including-googlevis-output-into-blogger.html}
{http://lamages.blogspot.com/2011/09/including-googlevis-output-into-blogger.html}.



\subsection{Embedding \googleVis in web sites dynamically}

In this section we provide examples how the \googleVis functions can be
embedded into web sites dynamically. With the R packages \rsp~\cite{Rsp} and
\brew~\cite{brew2010} we have two options to integrate R snippets into
html code. While the \rsp package comes with its own internal web
server, \brew requires the Apache HTTP server~\cite{Apache2.0} with
the \rapache~\cite{Rapache} module installed. Please note that
currently the \rapache module only runs on UNIX/Linux and Mac OS X.  

\subsubsection{Using \googleVis with \rsp}\label{rspexample}
The \rsp package allows the user to integrate R code into html code.
The R code is filtered by the \rsp web server and executed
at run time. 

As an example, we embed a motion chart into a rsp-page: 
\begin{verbatim}
<html>
<body>
<% library(googleVis)
   M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year") %>
<%= M$html$chart %>
</body>
</html>
\end{verbatim}
The R code included in \texttt{<\%$\dots$\%>} is executed when read by
the R.rsp HTTP server, but no R output will be displayed. To embed the
R output into the html code we have to add an equal sign,
\texttt{<\%=$\dots$\%>}, which acts as a \texttt{cat} statement.

You find an example as part of the \googleVis package. This example
can be displayed via the following R command:
<<eval=FALSE>>=
library(R.rsp) 
browseRsp() 
# Follow the link for googleVis in the opening browser window
@
The actual rsp-file is located within the \googleVis package directory
and again R allows you to find the file with the following command: 
<<eval=FALSE>>=
file.path(system.file("rsp", package = "googleVis"), "index.rsp")
@ 
For more information read the documentation of the \rsp package.

\subsubsection{Using \googleVis with \rapache and \brew}\label{rapacheexample}

\rapache supports web application development using
R and the Apache HTTP server. The  \rapache module
embeds the R interpreter into the Apache web server.  However, as we
would like to mix R and html code we also need a parser and
this is where the R package \brew comes into place. 

Files sitting in a dedicated \brew folder of the HTTP repository are
parsed by \brew when opened in the browser. The R code is 
executed with \rapache and the output is embedded into the site.
Hence the approach is similar to \rsp with the difference that the
two tasks are split. This has the advantage that R does not have to
run in a separate window.

Detailed installation instructions for \rapache are available on the
project site: 
\href{http://rapache.net/manual.html}{http://\-rapache.\-net/\-manual\-.html},
for specific comments on Mac OS X see: 
\href{http://worldofrcraft.blogspot.com/2010/08/installing-rapache-on-mac-os-x-snow.html}{http://\-worldofrcraft\-.blog\-spot\-.com/\-2010/\-08/\-installing\--rapache\--on\--mac\--os\--x\--snow\-.html}  

Following the installation of \rapache you will have to configure Apache.
Most likely you have to add something along the following lines to your
\path{apache2.conf} or \path{httpd.conf} file (often found in
\path{/etc/httpd} or \path{/private/etc/apache2/httpd.conf} on Mac OS X):
\begin{verbatim}
LoadModule R_module /usr/lib/apache2/modules/mod_R.so
## On Mac OS X more likely to be:
## LoadModule R_module libexec/apache2/mod_R.so
ROutputErrors
RSourceOnStartup "/var/www/rapache/R/startup.R"
## On Mac OS X the www folder is often equivalent to:
## /Library/WebServer/Documents/
\end{verbatim}
The first line loads the R module when the Apache web server is
started, the second line deals with error handling, while
the \path{startup.R} file is suitable for initial
set ups, e.g. libraries and global variables:
\begin{verbatim}
## Ensure the packages are installed so that mod_R 
## has access to them, e.g. not in your home folder
library{googleVis} 
library{lattice}
library{Cairo}
MyGlobalVar <- 42
\end{verbatim}

To test that \rapache is working open
\href{http://localhost/RApacheInfo}{http://\-localhost/\-RApacheInfo} and
you should find details about your system, an example can be found on
the \rapache site:
\href{http://biostat.mc.vanderbilt.edu/rapache/files/RApacheInfo.html}{http://\-biostat.\-mc.\-vanderbilt.\-edu/\-rapache/\-files/\-RApacheInfo\-.html} 

The next step is to install the \brew R package in the usual way:
<<eval=FALSE>>=
install.packages('brew')
@
Following this we have to tell Apache that files in a specific folder
should be parsed by \textbf{\texttt{brew}}. Again we edit the \path{apache2.conf} or
\path{httpd.conf}  and add the connection of the RHandler with the function \path{brew}:
\begin{verbatim}
<Directory /var/www/rapache/brew>
## On Mac OS more likely to be something like:
## <Directory /Library/WebServer/Documents/rapache/brew>
      SetHandler r-script
      RHandler brew::brew
</Directory>
\end{verbatim}

That's all. Restart the HTTP daemon and you can start placing files in
the \brew directory and access them via
\path{http://localhost/rapache/brew/filename}, e.g. a file containing:  
\begin{verbatim}
<html>
<body>
<h1>Fruits</h1>
<% library(googleVis)
   M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year") %>
<%= M$html$chart %>
</body>
</html>
\end{verbatim}

You will notice that the  \brew syntax is very similar to \texttt{rsp}.
For more information read the documentation of the \rapache
module and \brew package. 
You find two simple examples of brew files in the \googleVis
package. Again the following R command shows you the 
folder path:
<<eval=FALSE>>=
system.file("brew", package = "googleVis")
@ 

\section{Using \googleVis in presentations}
The Google Visualisation API is designed for web pages, so it should
be no surprise that it can be difficult or impossible to embed \googleVis output in
traditional presentation software like MS PowerPoint\footnote{For MS
  PowerPoint on MS Windows the pulg-in
  \href{http://skp.mvps.org/liveweb.htm}{liveweb} provides the
  functionality to insert web pages into a PowerPoint slide and
  refresh the pages real-time during slide show.}, Google Docs,
OpenOffice Impress or Apple Keynote. 

The easiest way is to include screen shots into the slide with links to
the live web pages. But this approach requires the presenter to switch
between applications during her talk. This can be fun, but quite often
it is not. 

An alternative would be to build the presentation as a web page it
self.  The JavaScript library deck.js~\cite{deck.js}, a j{Q}uery
framework for creating {HTML} presentations by Caleb  Troughton,
provides an elegant way of combining the slide paradigm with web content 
such as YouTube videos or \googleVis output. You find an example with
\googleVis charts on mages's blog:
\url{http://lamages.blogspot.com/2011/11/interactive-presentations.html} .

\begin{figure}[h]
  \centering
  \includegraphics[width=0.5\textwidth]{GettingStartedWithGoogleVis.png}
  \caption{\googleVis presentation with deck.js:
    \url{http://dl.dropbox.com/u/7586336/blogger/deck.js/googleVis/index.html}} 
  \label{fig:deck.js}
\end{figure}


\section{Beyond R}
In this section we present ideas which go beyond the usual coding in
R and are somewhat experimental.

\subsection{Registering to catch events}

Google visualisations can fire and receive
events~\footnote{\url{http://code.google.com/apis/chart/interactive/docs/reference.html\#addlistener}}. 
It exposes the following two JavaScript methods: 
\begin{itemize}
\item \texttt{google.visualization.events.trigger()} fires an event,
\item \texttt{google.visualization.events.addListener()} listens for events.
\end{itemize}

Here is an example of registering to receive the selection event from
the Google documentation:
\begin{verbatim}
var table = new google.visualization.Table(document.getElementById('table_div'));
table.draw(data, options);
google.visualization.events.addListener(table, 'select', selectHandler);

function selectHandler() {
  alert('A table row was selected');
}
\end{verbatim}

We will only deal with this special case of a 'select' event of the
'addListner' method. This event is available for most visualisations
and acts on user interactions, e.g. user selection clicks.

The 'addListener' method expects JavaScript code, which can be embedded
into a gvis-object via \texttt{options} as (undocumented) parameter
\texttt{gvis.listener.jscode}. 

Here are some examples:

Look up the selected item in Wikipedia:
<<eval=FALSE>>=
jscode <- "window.open('http://en.wikipedia.org/wiki/' 
                  + data.getValue(chart.getSelection()[0].row,0)); "

J1 <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',
                 options=list(dataMode="regions", gvis.listener.jscode=jscode))
plot(J1)
@ 
In the same way we can use the code in other charts, e.g. org- or line chart:                 
<<eval=FALSE>>=
plot(gvisOrgChart(Regions,  options=list(gvis.listener.jscode=jscode)))
plot(gvisLineChart(Regions[,c(1,3)], options=list(gvis.listener.jscode=jscode)))
@
In the following more advanced example the selected value of a table is
displayed in a message box:
<<eval=FALSE>>=
jscode <- "
       var sel = chart.getSelection();
       var row = sel[0].row;
       var text = data.getValue(row,1);
       alert(text);
"
J2 <- gvisTable(Population, options=list(gvis.listener.jscode=jscode))
plot(J2)
@ 
For more details see the \texttt{demo(EventListener)} and \href{http://code.google.com/apis/chart/interactive/docs/reference.html}{Google Visualisation API Reference}.

\section{Contact}
\subsection{Collaboration} 
Obviously, the package is work in progress and there are many other functions of the Google
Visualisation API which are still untouched. 

Please feel free to send us an email if you would like to be kept
informed of new versions, or if you have any feedback, ideas,
suggestions or would like to collaborate, our address is
\href{mailto:rvisualisation@gmail.com}{rvisualisation@gmail.com}. 


\subsection{Citation}
Please cite R and/or \googleVis if you use it in your work or publications. Use
<<eval=FALSE>>=
citation()
@
or
<<eval=FALSE>>=
citation("googleVis")
@
for information on how to cite the software.

\subsection{Training and consultancy}
Please contact us if you would like to discuss tailored training or
consultancy: \href{mailto:rvisualisation@gmail.com?subject=Training-and-consultancy}{rvisualisation@gmail.com} 


%%\clearpage

\bibliographystyle{alpha}
\bibliography{googleVis}
\addcontentsline{toc}{section}{References} 

\end{document}

